import pytest
import numpy as np
from matplotlib import pyplot as plt
from src.vizualize_fit.main import FitVisualizer

X = np.linspace(0, 20)
y1 = np.linspace(100, 500)
y2 = np.linspace(120, 235)
y3 = np.linspace(330, 485)
epochs = 50 #* default number for linspace

fitting_res = {
    'loss': [0.6090966463088989, 0.5742375254631042, 0.5623463988304138, 0.5537223219871521, 0.5455210208892822, 0.5385203957557678, 0.537312388420105, 0.5355382561683655, 0.5279296636581421, 0.5298775434494019, 0.523838460445404, 0.5241191387176514, 0.5205267071723938, 0.517081081867218, 0.5154851675033569, 0.5111212730407715, 0.5146140456199646, 0.5136802196502686, 0.5078202486038208, 0.5088682770729065, 0.5067662000656128, 0.5070247054100037, 0.5073811411857605, 0.5026127099990845, 0.502905011177063, 0.5045078992843628, 0.5000751614570618, 0.5047085881233215, 0.499468058347702, 0.5027065277099609, 0.4970061480998993, 0.4947270452976227, 0.49592941999435425, 0.4964762032032013, 0.49798381328582764, 0.4943948984146118, 0.49480149149894714, 0.48985761404037476, 0.49281519651412964, 0.4900047183036804, 0.4902177155017853, 
             0.4893028438091278, 0.48727282881736755, 0.49375757575035095, 0.48892533779144287, 0.48856911063194275, 0.4923499822616577, 0.48849764466285706, 0.48942098021507263, 0.48939353227615356], 
    'accuracy': [0.7097193598747253, 0.7327988147735596, 0.7326904535293579, 0.7336656451225281, 0.7369162440299988, 0.7397334575653076, 0.741358757019043, 0.7402752041816711, 0.7442843317985535, 0.7428756952285767, 0.74309241771698, 0.7436342239379883, 0.7479683756828308, 0.742767333984375, 0.7432007789611816, 0.7492685914039612, 0.748293399810791, 0.7487268447875977, 0.7487268447875977, 0.7545779347419739, 0.7536028027534485, 0.7527359127998352, 0.7529526352882385, 0.7546862959861755, 0.7529526352882385, 0.753819465637207, 0.7552281022071838, 0.7532777190208435, 0.7514356970787048, 0.7566366791725159, 0.7528442740440369, 0.757286787033081, 0.7559865713119507, 0.7539278268814087, 0.7550113797187805, 0.7612959146499634, 0.761404275894165, 0.7591288089752197, 0.757611870765686, 0.759345531463623, 0.759670615196228, 0.7595622539520264, 
                 0.7615126371383667, 0.7569617629051208, 0.7632462978363037, 0.7624878287315369, 0.7608624696731567, 0.7624878287315369, 0.7588037848472595, 0.7650883197784424], 
    'val_loss': [0.553159773349762, 0.5524922013282776, 0.5182266235351562, 0.5172230005264282, 0.5241103768348694, 0.5152302980422974, 0.5128641128540039, 0.5097362995147705, 
                 0.5049118399620056, 0.5077856779098511, 0.5031144618988037, 0.50371915102005, 0.5044122934341431, 0.5034534335136414, 0.4961493909358978, 0.4967874586582184, 0.5061910152435303, 0.501450777053833, 0.4994046092033386, 0.4958495497703552, 0.49603715538978577, 0.4991866946220398, 0.49667009711265564, 0.49342021346092224, 0.4949490427970886, 0.4968926012516022, 0.507030725479126, 0.4963744282722473, 0.5006467700004578, 0.49714013934135437, 0.49659785628318787, 0.497994989156723, 0.5020363330841064, 0.49972596764564514, 0.49679434299468994, 0.4953177869319916, 0.49355676770210266, 0.49644801020622253, 0.4977032542228699, 0.5016965270042419, 0.4943261742591858, 0.49295589327812195, 0.4945560097694397, 0.4951300323009491, 0.500188946723938, 0.4998888373374939, 0.5002006888389587, 0.49373263120651245, 0.4949570298194885, 0.4933694899082184], 
    'val_accuracy': [0.7417677640914917, 0.7417677640914917, 0.7417677640914917, 0.7409012317657471, 0.7634315490722656, 0.7616984248161316, 0.7582322359085083, 0.760831892490387, 0.754766047000885, 0.7564991116523743, 0.7564991116523743, 0.7599653601646423, 0.7616984248161316, 0.7660312056541443, 0.760831892490387, 0.7573657035827637, 0.7616984248161316, 0.7582322359085083, 0.7512997984886169, 0.7634315490722656, 0.7599653601646423, 0.7616984248161316, 0.7634315490722656, 0.7642980813980103, 0.7590987682342529, 0.7590987682342529, 0.7443674206733704, 0.7564991116523743, 0.7564991116523743, 0.7573657035827637, 0.7564991116523743, 0.7599653601646423, 0.7582322359085083, 0.7512997984886169, 0.7573657035827637, 0.7556325793266296, 0.760831892490387, 0.7651646733283997, 0.7564991116523743, 0.7426342964172363, 0.7668977379798889, 0.7573657035827637, 
                     0.760831892490387, 0.7512997984886169, 0.7521663904190063, 0.7599653601646423, 0.7590987682342529, 0.762565016746521, 0.7582322359085083, 0.7642980813980103]
}

history = FitVisualizer.data_to_dict(None, y1, y2, y3)

@pytest.fixture
def fv():
    return FitVisualizer(history)

def test_data_to_dict():
    to_dict = FitVisualizer.data_to_dict(None, y1, y2, y3)
    print(to_dict)
    assert type(to_dict) == dict

def test_zip():
    print(fitting_res)
    res = list(zip(*fitting_res.values()))
    print(res)
    assert 0

def test_fv():
    fv = FitVisualizer(history)
    print(fv.log_files)
    assert 0

def test_plot(fv):
    dic = fv.data_to_dict(None, y1, y2, y3)
    fv.plot(epochs)
    fv.add_title("Test Title")
    fv.add_labels(["lolx", "loly"])
    fv.savefig()

def test_save_fit_process(fv):
    fv.save_fit_process()
    assert 0

def test_save_model_summary(fv):
    fv.save_model_summary("12345678912345678913246845321321")


